//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "scenario")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub func_name: String,
    pub old_raw_msg: Option<String>,
    pub new_raw_msg: Option<String>,
    pub comment: Option<String>,
    pub func_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::api_message::Entity")]
    ApiMessage,
    #[sea_orm(
        belongs_to = "super::functions::Entity",
        from = "Column::FuncId",
        to = "super::functions::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Functions,
}

impl Related<super::api_message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiMessage.def()
    }
}

impl Related<super::functions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Functions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
